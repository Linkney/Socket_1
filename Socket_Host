

package host;


import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;


public class MyFrame_H extends JFrame
{
    JTextField port;
    JTextField cin;
    JButton start;
    JButton say;
    JTextArea content;
    Socket socket;

    MyFrame_H()
    {
        init();
        StartListen startL = new StartListen();
        SayListen sayL = new SayListen();
        start.addActionListener(startL);
        say.addActionListener(sayL);
    }

    void init() 
    {
        setLayout(new FlowLayout());
        setSize(400,400);
        setLocation(400,100);
        add(new JLabel("Port:"));
        port = new JTextField("8888",25);
        add(port);
        start = new JButton("Start");
        add(start);
        content = new JTextArea(15,35);
        JScrollPane scroll = new JScrollPane(content);
        add(scroll);
        add(new JLabel("Say:"));        
        cin = new JTextField(26);
        add(cin);        
        say = new JButton("Say");
        add(say);
    }
    
    class StartListen implements ActionListener
    {
        @Override
        public void actionPerformed(ActionEvent e) 
        {
            start.setEnabled(false);
            try 
            {
                ServerSocket s = new ServerSocket(Integer.parseInt(port.getText()));
                socket = s.accept();
                PrintWriter out = new PrintWriter(
                    new BufferedWriter(
                        new OutputStreamWriter(
                            socket.getOutputStream())),true);
                out.println("Connect succeed");
                content.append("Content succeed\n");
                ServerThread st = new ServerThread();
                st.start();
            } 
            catch (IOException ex) 
            {
                Logger.getLogger(MyFrame_H.class.getName()).log(Level.SEVERE, null, ex);
            }   
        }
    }
    
    class SayListen implements ActionListener
    {
        String str;
        @Override
        public void actionPerformed(ActionEvent e) 
        {
            try 
            {
                PrintWriter out = new PrintWriter(
                    new BufferedWriter(
                        new OutputStreamWriter(
                            socket.getOutputStream())),true);
                str = cin.getText();
                if(!str.isEmpty())
                {
                    out.println(str);
                    content.append("me:"+str+"\n");
                    out.flush();
                }
                cin.setText("");
            } 
            catch (IOException ex) 
            {
                Logger.getLogger(MyFrame_H.class.getName()).log(Level.SEVERE, null, ex);
            } 
        }   
    }
    
    class ServerThread extends Thread
    {
        public void run()
        {
            try 
            {
                BufferedReader in = new BufferedReader(
                        new InputStreamReader(
                                socket.getInputStream()));
                String str;
                while(true)
                {
                    str = in.readLine();
                    content.append(str+"\n");
                }
            } 
            catch (IOException ex) 
            {
                Logger.getLogger(MyFrame_H.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
}
